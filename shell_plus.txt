>>> profile=Profile.objects.get(id = 100)
>>> profile.user
>>> profile.user.name
'Jacob Murphy'
>>> profile.user.active
True
RETRIEVING SINGLE objects

>>> projects = Project.objects.filter(task__assignee=100)
>>> print(projects)
<QuerySet [<Project: Project - market>, <Project: Project - market>]>
RETRIEVING project assigned to user id = 100

>>> projects = Project.objects.filter(title__in=["Project - face", "Project - mean"])
>>> projects
<QuerySet [<Project: Project - face>, <Project: Project - mean>, <Project: Project - face>]>
FIlTERING projects that are in list

>>> tasks = Task.objects.filter(title__icontains="by")
>>> tasks
<QuerySet [<Task: Task - by>]>
FIlTERING task that contains word 'by'

>>> tasks = Task.objects.filter(title__icontains="rac")
>>> tasks
<QuerySet [<Task: Task - practice>, <Task: Task - character>, <Task: Task - race>, <Task: Task - practice>]>
FIlTERING task that contains word 'rac'

>>> projects = Project.objects.filter(description__isnull=True)
>>> projects
<QuerySet []>
No project have null decription

>>> projects = Project.objects.filter(start_date__lte=timezone.now())
>>> projects
<QuerySet [<Project: Project - campaign>, <Project: Project - month>, <Project: Project - number>, <Project: Project - account>, <Project: Project - ever>, <Project: Project - enough>, <Project: Project - throughout>, <Project: Project - hold>, <Project: Project - good>, <Project: Project - worry>, <Project: Project - single>, <Project: Project - behavior>, <Project: Project - plan>, <Project: Project - lose>, <Project: Project - court>, <Project: Project - serious>, <Project: Project - TV>, <Project: Project - market>, <Project: Project - bad>, <Project: Project - good>, '...(remaining elements truncated)...']>
project that started before today

>>> phone=Profile.objects.filter(id__gte=23)
>>> phone
<QuerySet [<Profile: Jennifer Murphy - manager>, <Profile: Jose Hughes - qa>, <Profile: Sandy Martinez - developer>, <Profile: Kathy Barker - developer>, <Profile: Travis Thomas - qa>, <Profile: Debbie Smith - qa>, <Profile: Jeffrey Nelson - manager>, <Profile: Amanda Fisher - qa>, <Profile: Eric Smith - developer>, <Profile: Andrew Schwartz - manager>, <Profile: Barry Anderson - qa>, <Profile: Katrina Knapp - developer>, <Profile: Sophia Gilbert - qa>, <Profile: Lindsey Jones - manager>, <Profile: Michael Thomas DDS - developer>, <Profile: Lucas Hanson - qa>, <Profile: Martin Moore - developer>, <Profile: Bethany Anderson - developer>, <Profile: Ronald Jones - manager>, <Profile: Nathaniel Jackson - qa>, '...(remaining elements truncated)...']>
Roecords with Id greater than 23

>>> phone=Profile.objects.filter(id__lte=60)
>>> phone
<QuerySet [<Profile: Sandy Martinez - developer>, <Profile: Kathy Barker - developer>, <Profile: Travis Thomas - qa>, <Profile: Debbie Smith - qa>, <Profile: Jeffrey Nelson - manager>, <Profile: Amanda Fisher - qa>, <Profile: Eric Smith - developer>, <Profile: Andrew Schwartz - manager>, <Profile: Barry Anderson - qa>, <Profile: Katrina Knapp - developer>]>
Records with id less than 60

>>> exists = Document.objects.filter(version="v2024.02.16a").exists()
>>> exists
False
Checking if any document with this version exists or not

>>> task_count = Task.objects.count()
>>> task_count
465
counting all tasks

>>> project = 'Project - loss'
>>> p= Project.objects.get(title=project)
>>> c=Task.objects.filter(project=p).count()
>>> c
3
counting no. of tasks of 'Project - loss'

>>> phone = Profile.objects.filter(phone_no__icontains="0301")
>>> phone
<QuerySet [<Profile: Wanda Johnson - qa>]>
profile which phone number that contains 0301

>>> phone = Profile.objects.filter(phone_no__icontains="3012")
>>> phone
<QuerySet [<Profile: Yvonne Fields - developer>]>
profile which phone number that contains 3012

>>> count = Task.objects.filter(project=150).count()
>>> count
3
number of tasks of project with id 150

projects = Project.objects.exclude(title="Project 1")


>>> projects = Project.objects.exclude(title__icontains="a")
excluding projects that contain 'a' in title

>>> Task.objects.filter(status=Task.Status.Open).update(status=Task.Status.Working)
465
filtered open tasks and updated their status to working

>>> Task.objects.filter(title__icontains='j').delete()
(2, {'apprac.Task_assignee': 1, 'apprac.Task': 1})
deleted task that contain j in title

>>> taks = [Task(title="Task", description="Description of task", status=Task.Status.Open, project=p), Task(title="Task2", descr
iption="Description of task2", status=Task.Status.Open, project=p),]
>>> Task.objects.bulk_create(taks)
[<Task: Task>, <Task: Task2>]
creating bulk tasks

projects = Project.objects.order_by('-start_date')
ordering by startdateqs1 = Project.objects.filter(title="Project 1")

>>> qs1 = Project.objects.filter(title="Project - market")
>>> qs2 = Project.objects.filter(description__icontains="project")
>>> projects = qs1.intersection(qs2)
>>> projects
<QuerySet []>
>>> qs2 = Project.objects.filter(description__icontains="project")
>>> projects = qs1.union(qs2)
>>> projects
<QuerySet [<Project: Project - market>, <Project: Project - land>, <Project: Project - beautiful>]>
Trying to find union and intersection

>>> projects = Project.objects.filter(Q(title__icontains='Project') & Q(description__icontains='new'))
>>> projects
<QuerySet [<Project: Project - enough>, <Project: Project - safe>, <Project: Project - audience>, <Project: Project - none>, <Project: Project - star>, <Project: Project - already>, <Project: Project - sense>, <Project: Project - quite>, <Project: Project - attack>, <Project: Project - course>, <Project: Project - pick>, <Project: Project - significant>, <Project: Project - institution>]>
retrieve projects where the title contains 'Project' and the description contains 'new'

total_price = Product.objects.aggregate(total_price=Sum('price'))
calculate the total price of all products

>>> projects_with_task_count = Project.objects.annotate(task_count=Count('task'))
>>> for project in projects_with_task_count: print(f"{project.title}: {project.task_count} tasks")
... 
Project - argue: 1 tasks
Project - bad: 3 tasks
Project - audience: 6 tasks
Project - raise: 2 tasks
Project - summer: 7 tasks
Project - something: 0 tasks
Project - none: 1 tasks
Project - commercial: 3 tasks
Project - safe: 4 tasks
Project - mean: 0 tasks
Project - especially: 1 tasks
Project - force: 2 tasks
Project - hospital: 4 tasks
Project - director: 0 tasks
Project - sense: 2 tasks
Project - PM: 4 tasks
Project - knowledge: 2 tasks
Project - bag: 3 tasks
Project - land: 5 tasks
Project - all: 1 tasks
Project - easy: 1 tasks
Project - hold: 5 tasks
Project - blue: 3 tasks
Project - report: 1 tasks
Project - then: 0 tasks
Project - director: 3 tasks
Project - course: 3 tasks
Project - difference: 5 tasks
Project - quite: 2 tasks
Project - require: 1 tasks
Project - fall: 5 tasks
Project - attack: 4 tasks
Project - above: 4 tasks
Project - moment: 3 tasks
Project - participant: 2 tasks
Project - worry: 4 tasks
Project - movie: 2 tasks
Project - source: 2 tasks
Project - star: 4 tasks
Project - happen: 2 tasks
Project - box: 2 tasks
Project - anyone: 3 tasks
Project - beautiful: 8 tasks
Project - hit: 3 tasks
Project - policy: 2 tasks
Project - within: 2 tasks
Project - manager: 5 tasks
Project - product: 4 tasks
Project - center: 2 tasks
Project - behavior: 4 tasks
Project - low: 2 tasks
Project - item: 2 tasks
Project - activity: 1 tasks
Project - design: 3 tasks
Project - leg: 3 tasks
Project - leader: 4 tasks
Project - ever: 4 tasks
Project - painting: 4 tasks
Project - reduce: 6 tasks
Project - serious: 5 tasks
Project - throughout: 8 tasks
Project - loss: 5 tasks
Project - number: 7 tasks
Project - campaign: 6 tasks
Project - lose: 5 tasks
Project - bag: 1 tasks
Project - face: 2 tasks
Project - he: 1 tasks
Project - money: 1 tasks
Project - already: 2 tasks
Project - these: 3 tasks
Project - pattern: 7 tasks
Project - court: 2 tasks
Project - customer: 1 tasks
Project - good: 2 tasks
Project - sense: 3 tasks
Project - bag: 5 tasks
Project - nice: 3 tasks
Project - even: 4 tasks
Project - son: 3 tasks
Project - they: 4 tasks
Project - exactly: 2 tasks
Project - environment: 3 tasks
Project - should: 7 tasks
Project - training: 0 tasks
Project - meeting: 0 tasks
Project - scientist: 1 tasks
Project - trouble: 4 tasks
Project - structure: 1 tasks
Project - cause: 5 tasks
Project - case: 4 tasks
Project - language: 5 tasks
Project - TV: 4 tasks
Project - face: 2 tasks
Project - throughout: 3 tasks
Project - seek: 3 tasks
Project - letter: 4 tasks
Project - six: 0 tasks
Project - prove: 2 tasks
Project - street: 3 tasks
Project - pick: 3 tasks
Project - ground: 3 tasks
Project - month: 5 tasks
Project - respond: 3 tasks
Project - manager: 2 tasks
Project - year: 5 tasks
Project - read: 1 tasks
Project - concern: 2 tasks
Project - focus: 7 tasks
Project - window: 4 tasks
Project - personal: 4 tasks
Project - attorney: 4 tasks
Project - lose: 4 tasks
Project - then: 0 tasks
Project - plant: 7 tasks
Project - market: 6 tasks
Project - education: 4 tasks
Project - later: 2 tasks
Project - a: 5 tasks
Project - much: 3 tasks
Project - expert: 3 tasks
Project - significant: 2 tasks
Project - thank: 2 tasks
Project - school: 3 tasks
Project - skin: 3 tasks
Project - worry: 2 tasks
Project - finish: 2 tasks
Project - single: 1 tasks
Project - million: 0 tasks
Project - finish: 2 tasks
Project - surface: 2 tasks
Project - institution: 1 tasks
Project - such: 2 tasks
Project - hotel: 5 tasks
Project - enough: 6 tasks
Project - bad: 2 tasks
Project - anything: 2 tasks
Project - street: 1 tasks
Project - account: 7 tasks
Project - floor: 5 tasks
Project - it: 3 tasks
Project - politics: 1 tasks
Project - girl: 2 tasks
Project - job: 1 tasks
Project - American: 2 tasks
Project - quickly: 4 tasks
Project - plan: 3 tasks
Project - really: 4 tasks
Project - good: 11 tasks
Project - information: 4 tasks